<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
<TITLE>95% Confidence Intervals for a Rate</TITLE>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META name="viewport" content="width=800, initial-scale=1, maximum-scale=2">
<META NAME="author" CONTENT="Kevin M. Sullivan, Roger A. Mir, and Andrew G. Dean">
<META http-equiv=Content-Type content="text/html; charset=UTF-8">

<link rel="stylesheet" href="../CSS/TabbedUI.css" type="text/css" media="screen">
<link rel="stylesheet" href="../CSS/TabbedUI-print.css" TYPE="text/css" MEDIA="print">
<link rel="styleSheet" href="../CSS/dtree.css" type="text/css" >
                                   <!-- --------------------- -->
<script language="JavaScript" type="text/JavaScript">
  var basefilename="PersonTime1";  //The name from which other filenames are constructed in AppHelper.js
                              //******For a new application, change "Proportion" to a new, unique name********
</script>
								
<!-- From the IncludeFiles.js section, ancillary modules are included that contain necessary code.  Generally you will not
have to alter code in these modules, but they are all available as part of the source, and are listed in IncludeFiles.js. -->

<SCRIPT language="JavaScript" src="../js/IncludeFiles.js" type=text/JavaScript></SCRIPT>
								
									<!-- --------------------- -->

<script language="JavaScript" type="text/JavaScript">


var OEShell=true;
//These global variables must be present for ETable to work with settings from
//this module.
//var ConfidenceLevel = readCookie("openepi","ConfidenceLevel");
//alert("ConfidenceLevel=" + ConfidenceLevel)
//var Pvalues = readCookie("openepi","Pvalues");
//alert("Pvalues=" +Pvalues)
//if (ConfidenceLevel == null || ConfidenceLevel< 20) {ConfidenceLevel=95}

ConfidenceLevel=95; //Calculation does not use conf level.

function configureInput()
{//Indented sections are the ones to be changed to configure a new application
		var crows=2; 
		//number of rows down the table, not counting the header (title)
		var ccols=3;
		//number of cells or columns across the table
		var x=200;
		//pixels from the left side of the page where table starts
		var y=100;
		//pixels down from top of page where table starts
		var w=300;
		//width of table in pixels
		var h=150;
		//height of table in pixels

var ColPercent=false;
var RowPercent=false;
var HighLightP=true; 

  		 
//"Input" is an object class found in OECommands.js, which must be in the list of js files
// at the beginning of this module.
//First create a new Input object called intable.
intable=new Input;
//Then using intable, parse the row-by-row commands and return the results
//in the form of commands for Etable in the two arrays 
with (intable)
 { 
		 //HERE ARE THE COMMANDS THAT SET UP THE DATA ENTRY TABLE.
		 //They are parsed by the corresponding functions in the Input class
		 //to produce a series of commands for Etable, generally cell by cell
		 //rather than row by row.  
		  
		 // allowstrata(true);
		  //Sets up buttons to add, access, and delete strata, allowing stratified
		  //tables to be entered. 
		  usetablesettings(false); //Turn off the ability to rotate tables
		  settingslink(true); 
          //When true, shows an anchor with an href to the settings.htm program 
		  //and displays the current confidence level.
	      
		  lock("labels");
		  newtable(crows,ccols,w,h,x,y);		  
		  title("<b>Confidence Intervals for a Rate<b>");
		  newrow("span2:Number of cases:","data:")
		  newrow("span2:Person-time:", "data:")		  
	  
  //The following lines must be present to place the parsed commands
  //into two arrays that are used by Etable to configure the input table.
  etablecmds1=precmds;
  etablecmds2=postcmds;
 
 }
}

function checkcode(r,c,entry)
{
  //This function, if it exists, is called by ETable after every entry into a data
  //cell, giving an opportunity to evaluate and possibly modify the entry, or to
  //take some other action based upon it.  Here the function is set up to 
  //insure that only numbers are put in the cells and that blank entries become 
  //zeros.  If statements can be used
  //to write code that applies only to particular cells.
  //To see what row and column entries are made in, uncomment the following line:
  //running the program, then enter unique numbers so that you can see which cells they
  //are in.
  //alert("Row="+r+"  Col=" + c)
  /* 
   The following "if" statement acts on an entry in row 1 (the numerator in this
   case).  It muliplies the entry by 43 and sets the cell in row 1, column 2, to
  the result.  Then, to illustrate how to retrieve a value from the input table,
  it retrieves the value just set and displays it in an alert box.  The routine
  is nonsense, but it illustrates how to both get and set values from cells 
  in the input table.  Note that the user's entry in the current cell, and the
  row and column of the current cell are passed in the parameters of this
  function, and that the value of the current cell has not yet been set. It 
  will be set automatically to whatever value you return from the checkcode
  function.  Hence, you can evaluate, massage, and alter the entered value,
  and use the results to set the current cell (as the returned value) or other
  cells(using EntryWin.setCellValue(row,col,value)).
  if (r==0)
    {
	 //Don't forget the DOUBLE equals sign for equality
	 EntryWin.setCellValue(1,2,parseInt(entry)*43)
	 alert(EntryWin.getCellValue(1,2))
	}
	*/
	//The following code returns a blank string if the user enters anything other
	//than a number in a data field.
     var e=parseFloat(entry)  //Convert to a number if possible
     if (isNaN(e)) 
	   {
	    e=""  //If not a number than set e to blank
}
     return e  //Return the value to be placed in the cell.
}

function OECalculate(data)
{
//Called by the Calculate button in the ETable module.  The entire dataMatrix, including
//both metadata and data is passed as the "data" array.  To see the structure of this
//array, uncomment the following 3 lines and run the program:


outTable=new Output(data);
with (outTable)
{  
       appDataArray=outTable.data; 
       //Define an output table.  You can include extra columns to help with the formatting,
	   //and then use the span property to combine several cells and make a wider one.
	   
		newtable(6,90);
       //6 columns and 100 pixels per column
        
	 
		//Here is the call to the javascript routine that does the calculations
		//passing the data array to the new routine.  The function itself can be
		//placed in the .js file for this module.  Newrow and other commands are
		//used inside the calculation function to add meaningful output to the
		//HTML table.  An alterative would be to have the function return the results
		//of calculation for formatting within this function.  Either method will do the job.
   

		CalcStats(outTable);
        
       
//The results should be an HTML string.  The htmlHeaderWithData function (found in appHelper.js)
// will add an HTML header, the contents of the data input table, and ending tags if they are not already present.
//It then displays the results in a new browser window, from which the user can cut and paste
//to other programs.  
}   //End of With(outTable)
						
writeResults(outTable.s,basefilename,true,outTable)
}

writeFrontEnd(Title,Authors,Description,demofile);
  //write HTML from a string.  The fourth parameter is the name of the demofile.
</script>
<!-- This is the end of the HTML page, believe it or not.  All the tags are written dynamically by writeFrontEnd -->
